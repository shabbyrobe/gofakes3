package s3select

// Code generated by peg sql.peg DO NOT EDIT

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleGrammar
	ruleLimitClause
	ruleWhereClause
	ruleFieldsExpr
	ruleFieldExpr
	ruleFieldBegin
	ruleAlias
	ruleObject
	ruleS3ObjectPath
	ruleArrayIndex
	ruleWildcardIndex
	ruleObjectIndex
	ruleObjectProp
	rulePathPart
	rulePath
	ruleIdentifier
	ruleIdentStart
	ruleIdentCont
	ruleSelect
	ruleFrom
	ruleWhere
	ruleAs
	ruleLimit
	ruleNumber
	ruleSpacing
	ruleMustSpacing
	ruleSpace
	ruleEndOfLine
	ruleEndOfFile
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
)

var rul3s = [...]string{
	"Unknown",
	"Grammar",
	"LimitClause",
	"WhereClause",
	"FieldsExpr",
	"FieldExpr",
	"FieldBegin",
	"Alias",
	"Object",
	"S3ObjectPath",
	"ArrayIndex",
	"WildcardIndex",
	"ObjectIndex",
	"ObjectProp",
	"PathPart",
	"Path",
	"Identifier",
	"IdentStart",
	"IdentCont",
	"Select",
	"From",
	"Where",
	"As",
	"Limit",
	"Number",
	"Spacing",
	"MustSpacing",
	"Space",
	"EndOfLine",
	"EndOfFile",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Peg struct {
	*SelectQuery

	Buffer string
	buffer []rune
	rules  [42]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Peg) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Peg) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Peg
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Peg) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Peg) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Peg) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AppendField()
		case ruleAction1:
			p.PathObjectProp(text)
		case ruleAction2:
			p.RegisterAlias(text)
		case ruleAction3:
			p.FromArchive()
		case ruleAction4:
			p.FromObject()
		case ruleAction5:
			p.FromS3ObjectPath()
		case ruleAction6:
			p.PathArrayIndex(text)
		case ruleAction7:
			p.PathWildcardIndex()
		case ruleAction8:
			p.PathObjectProp(text)
		case ruleAction9:
			p.PathObjectProp(text)
		case ruleAction10:
			p.PathObjectPropNoCase(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Peg) error {
	return func(p *Peg) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Peg) error {
	return func(p *Peg) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Peg) Init(options ...func(*Peg) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Grammar <- <(Spacing Select FieldsExpr MustSpacing From Object MustSpacing (As? Alias)? (MustSpacing WhereClause)? (MustSpacing LimitClause)? EndOfFile)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSpacing]() {
					goto l0
				}
				if !_rules[ruleSelect]() {
					goto l0
				}
				if !_rules[ruleFieldsExpr]() {
					goto l0
				}
				if !_rules[ruleMustSpacing]() {
					goto l0
				}
				if !_rules[ruleFrom]() {
					goto l0
				}
				if !_rules[ruleObject]() {
					goto l0
				}
				if !_rules[ruleMustSpacing]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[ruleAs]() {
							goto l4
						}
						goto l5
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
				l5:
					if !_rules[ruleAlias]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[ruleMustSpacing]() {
						goto l6
					}
					if !_rules[ruleWhereClause]() {
						goto l6
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[ruleMustSpacing]() {
						goto l8
					}
					if !_rules[ruleLimitClause]() {
						goto l8
					}
					goto l9
				l8:
					position, tokenIndex = position8, tokenIndex8
				}
			l9:
				if !_rules[ruleEndOfFile]() {
					goto l0
				}
				add(ruleGrammar, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 LimitClause <- <(Limit Number)> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				if !_rules[ruleLimit]() {
					goto l10
				}
				if !_rules[ruleNumber]() {
					goto l10
				}
				add(ruleLimitClause, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 2 WhereClause <- <Where> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[ruleWhere]() {
					goto l12
				}
				add(ruleWhereClause, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 FieldsExpr <- <(FieldExpr (Spacing ',' Spacing FieldExpr)*)> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				if !_rules[ruleFieldExpr]() {
					goto l14
				}
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l17
					}
					if buffer[position] != rune(',') {
						goto l17
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l17
					}
					if !_rules[ruleFieldExpr]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				add(ruleFieldsExpr, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 FieldExpr <- <(FieldBegin Path? Action0)> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				if !_rules[ruleFieldBegin]() {
					goto l18
				}
				{
					position20, tokenIndex20 := position, tokenIndex
					if !_rules[rulePath]() {
						goto l20
					}
					goto l21
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
			l21:
				if !_rules[ruleAction0]() {
					goto l18
				}
				add(ruleFieldExpr, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 5 FieldBegin <- <(<Identifier> Action1)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24 := position
					if !_rules[ruleIdentifier]() {
						goto l22
					}
					add(rulePegText, position24)
				}
				if !_rules[ruleAction1]() {
					goto l22
				}
				add(ruleFieldBegin, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 6 Alias <- <(<Identifier> Action2)> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				{
					position27 := position
					if !_rules[ruleIdentifier]() {
						goto l25
					}
					add(rulePegText, position27)
				}
				if !_rules[ruleAction2]() {
					goto l25
				}
				add(ruleAlias, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 7 Object <- <((('a' / 'A') ('r' / 'R') ('c' / 'C') ('h' / 'H') ('i' / 'I') ('v' / 'V') ('e' / 'E') Action3) / (('o' / 'O') ('b' / 'B') ('j' / 'J') ('e' / 'E') ('c' / 'C') ('t' / 'T') Action4) / (S3ObjectPath Action5))> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('A') {
							goto l31
						}
						position++
					}
				l32:
					{
						position34, tokenIndex34 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l35
						}
						position++
						goto l34
					l35:
						position, tokenIndex = position34, tokenIndex34
						if buffer[position] != rune('R') {
							goto l31
						}
						position++
					}
				l34:
					{
						position36, tokenIndex36 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l37
						}
						position++
						goto l36
					l37:
						position, tokenIndex = position36, tokenIndex36
						if buffer[position] != rune('C') {
							goto l31
						}
						position++
					}
				l36:
					{
						position38, tokenIndex38 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l39
						}
						position++
						goto l38
					l39:
						position, tokenIndex = position38, tokenIndex38
						if buffer[position] != rune('H') {
							goto l31
						}
						position++
					}
				l38:
					{
						position40, tokenIndex40 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l41
						}
						position++
						goto l40
					l41:
						position, tokenIndex = position40, tokenIndex40
						if buffer[position] != rune('I') {
							goto l31
						}
						position++
					}
				l40:
					{
						position42, tokenIndex42 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l43
						}
						position++
						goto l42
					l43:
						position, tokenIndex = position42, tokenIndex42
						if buffer[position] != rune('V') {
							goto l31
						}
						position++
					}
				l42:
					{
						position44, tokenIndex44 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l45
						}
						position++
						goto l44
					l45:
						position, tokenIndex = position44, tokenIndex44
						if buffer[position] != rune('E') {
							goto l31
						}
						position++
					}
				l44:
					if !_rules[ruleAction3]() {
						goto l31
					}
					goto l30
				l31:
					position, tokenIndex = position30, tokenIndex30
					{
						position47, tokenIndex47 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l48
						}
						position++
						goto l47
					l48:
						position, tokenIndex = position47, tokenIndex47
						if buffer[position] != rune('O') {
							goto l46
						}
						position++
					}
				l47:
					{
						position49, tokenIndex49 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l50
						}
						position++
						goto l49
					l50:
						position, tokenIndex = position49, tokenIndex49
						if buffer[position] != rune('B') {
							goto l46
						}
						position++
					}
				l49:
					{
						position51, tokenIndex51 := position, tokenIndex
						if buffer[position] != rune('j') {
							goto l52
						}
						position++
						goto l51
					l52:
						position, tokenIndex = position51, tokenIndex51
						if buffer[position] != rune('J') {
							goto l46
						}
						position++
					}
				l51:
					{
						position53, tokenIndex53 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l54
						}
						position++
						goto l53
					l54:
						position, tokenIndex = position53, tokenIndex53
						if buffer[position] != rune('E') {
							goto l46
						}
						position++
					}
				l53:
					{
						position55, tokenIndex55 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l56
						}
						position++
						goto l55
					l56:
						position, tokenIndex = position55, tokenIndex55
						if buffer[position] != rune('C') {
							goto l46
						}
						position++
					}
				l55:
					{
						position57, tokenIndex57 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l58
						}
						position++
						goto l57
					l58:
						position, tokenIndex = position57, tokenIndex57
						if buffer[position] != rune('T') {
							goto l46
						}
						position++
					}
				l57:
					if !_rules[ruleAction4]() {
						goto l46
					}
					goto l30
				l46:
					position, tokenIndex = position30, tokenIndex30
					if !_rules[ruleS3ObjectPath]() {
						goto l28
					}
					if !_rules[ruleAction5]() {
						goto l28
					}
				}
			l30:
				add(ruleObject, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 8 S3ObjectPath <- <(('s' / 'S') '3' ('o' / 'O') ('b' / 'B') ('j' / 'J') ('e' / 'E') ('c' / 'C') ('t' / 'T') (WildcardIndex Path)?)> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				{
					position61, tokenIndex61 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l62
					}
					position++
					goto l61
				l62:
					position, tokenIndex = position61, tokenIndex61
					if buffer[position] != rune('S') {
						goto l59
					}
					position++
				}
			l61:
				if buffer[position] != rune('3') {
					goto l59
				}
				position++
				{
					position63, tokenIndex63 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l64
					}
					position++
					goto l63
				l64:
					position, tokenIndex = position63, tokenIndex63
					if buffer[position] != rune('O') {
						goto l59
					}
					position++
				}
			l63:
				{
					position65, tokenIndex65 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l66
					}
					position++
					goto l65
				l66:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('B') {
						goto l59
					}
					position++
				}
			l65:
				{
					position67, tokenIndex67 := position, tokenIndex
					if buffer[position] != rune('j') {
						goto l68
					}
					position++
					goto l67
				l68:
					position, tokenIndex = position67, tokenIndex67
					if buffer[position] != rune('J') {
						goto l59
					}
					position++
				}
			l67:
				{
					position69, tokenIndex69 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l70
					}
					position++
					goto l69
				l70:
					position, tokenIndex = position69, tokenIndex69
					if buffer[position] != rune('E') {
						goto l59
					}
					position++
				}
			l69:
				{
					position71, tokenIndex71 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l72
					}
					position++
					goto l71
				l72:
					position, tokenIndex = position71, tokenIndex71
					if buffer[position] != rune('C') {
						goto l59
					}
					position++
				}
			l71:
				{
					position73, tokenIndex73 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l74
					}
					position++
					goto l73
				l74:
					position, tokenIndex = position73, tokenIndex73
					if buffer[position] != rune('T') {
						goto l59
					}
					position++
				}
			l73:
				{
					position75, tokenIndex75 := position, tokenIndex
					if !_rules[ruleWildcardIndex]() {
						goto l75
					}
					if !_rules[rulePath]() {
						goto l75
					}
					goto l76
				l75:
					position, tokenIndex = position75, tokenIndex75
				}
			l76:
				add(ruleS3ObjectPath, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 9 ArrayIndex <- <('[' <Number+> ']' Action6)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('[') {
					goto l77
				}
				position++
				{
					position79 := position
					if !_rules[ruleNumber]() {
						goto l77
					}
				l80:
					{
						position81, tokenIndex81 := position, tokenIndex
						if !_rules[ruleNumber]() {
							goto l81
						}
						goto l80
					l81:
						position, tokenIndex = position81, tokenIndex81
					}
					add(rulePegText, position79)
				}
				if buffer[position] != rune(']') {
					goto l77
				}
				position++
				if !_rules[ruleAction6]() {
					goto l77
				}
				add(ruleArrayIndex, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 10 WildcardIndex <- <('[' '*' ']' Action7)> */
		func() bool {
			position82, tokenIndex82 := position, tokenIndex
			{
				position83 := position
				if buffer[position] != rune('[') {
					goto l82
				}
				position++
				if buffer[position] != rune('*') {
					goto l82
				}
				position++
				if buffer[position] != rune(']') {
					goto l82
				}
				position++
				if !_rules[ruleAction7]() {
					goto l82
				}
				add(ruleWildcardIndex, position83)
			}
			return true
		l82:
			position, tokenIndex = position82, tokenIndex82
			return false
		},
		/* 11 ObjectIndex <- <('[' '\'' <Identifier> '\'' ']' Action8)> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if buffer[position] != rune('[') {
					goto l84
				}
				position++
				if buffer[position] != rune('\'') {
					goto l84
				}
				position++
				{
					position86 := position
					if !_rules[ruleIdentifier]() {
						goto l84
					}
					add(rulePegText, position86)
				}
				if buffer[position] != rune('\'') {
					goto l84
				}
				position++
				if buffer[position] != rune(']') {
					goto l84
				}
				position++
				if !_rules[ruleAction8]() {
					goto l84
				}
				add(ruleObjectIndex, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 12 ObjectProp <- <('.' ((<Identifier> Action9) / ('"' <Identifier> '"' Action10)))> */
		func() bool {
			position87, tokenIndex87 := position, tokenIndex
			{
				position88 := position
				if buffer[position] != rune('.') {
					goto l87
				}
				position++
				{
					position89, tokenIndex89 := position, tokenIndex
					{
						position91 := position
						if !_rules[ruleIdentifier]() {
							goto l90
						}
						add(rulePegText, position91)
					}
					if !_rules[ruleAction9]() {
						goto l90
					}
					goto l89
				l90:
					position, tokenIndex = position89, tokenIndex89
					if buffer[position] != rune('"') {
						goto l87
					}
					position++
					{
						position92 := position
						if !_rules[ruleIdentifier]() {
							goto l87
						}
						add(rulePegText, position92)
					}
					if buffer[position] != rune('"') {
						goto l87
					}
					position++
					if !_rules[ruleAction10]() {
						goto l87
					}
				}
			l89:
				add(ruleObjectProp, position88)
			}
			return true
		l87:
			position, tokenIndex = position87, tokenIndex87
			return false
		},
		/* 13 PathPart <- <(ObjectIndex / ObjectProp / ArrayIndex / WildcardIndex)> */
		func() bool {
			position93, tokenIndex93 := position, tokenIndex
			{
				position94 := position
				{
					position95, tokenIndex95 := position, tokenIndex
					if !_rules[ruleObjectIndex]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position95, tokenIndex95
					if !_rules[ruleObjectProp]() {
						goto l97
					}
					goto l95
				l97:
					position, tokenIndex = position95, tokenIndex95
					if !_rules[ruleArrayIndex]() {
						goto l98
					}
					goto l95
				l98:
					position, tokenIndex = position95, tokenIndex95
					if !_rules[ruleWildcardIndex]() {
						goto l93
					}
				}
			l95:
				add(rulePathPart, position94)
			}
			return true
		l93:
			position, tokenIndex = position93, tokenIndex93
			return false
		},
		/* 14 Path <- <PathPart+> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[rulePathPart]() {
					goto l99
				}
			l101:
				{
					position102, tokenIndex102 := position, tokenIndex
					if !_rules[rulePathPart]() {
						goto l102
					}
					goto l101
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
				add(rulePath, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 15 Identifier <- <(IdentStart IdentCont*)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				if !_rules[ruleIdentStart]() {
					goto l103
				}
			l105:
				{
					position106, tokenIndex106 := position, tokenIndex
					if !_rules[ruleIdentCont]() {
						goto l106
					}
					goto l105
				l106:
					position, tokenIndex = position106, tokenIndex106
				}
				add(ruleIdentifier, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 16 IdentStart <- <([a-z] / [A-Z] / '_')> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				{
					position109, tokenIndex109 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l110
					}
					position++
					goto l109
				l110:
					position, tokenIndex = position109, tokenIndex109
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l111
					}
					position++
					goto l109
				l111:
					position, tokenIndex = position109, tokenIndex109
					if buffer[position] != rune('_') {
						goto l107
					}
					position++
				}
			l109:
				add(ruleIdentStart, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 17 IdentCont <- <(IdentStart / [0-9])> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				{
					position114, tokenIndex114 := position, tokenIndex
					if !_rules[ruleIdentStart]() {
						goto l115
					}
					goto l114
				l115:
					position, tokenIndex = position114, tokenIndex114
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l112
					}
					position++
				}
			l114:
				add(ruleIdentCont, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 18 Select <- <(('s' / 'S') ('e' / 'E') ('l' / 'L') ('e' / 'E') ('c' / 'C') ('t' / 'T') MustSpacing)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				{
					position118, tokenIndex118 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l119
					}
					position++
					goto l118
				l119:
					position, tokenIndex = position118, tokenIndex118
					if buffer[position] != rune('S') {
						goto l116
					}
					position++
				}
			l118:
				{
					position120, tokenIndex120 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l121
					}
					position++
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('E') {
						goto l116
					}
					position++
				}
			l120:
				{
					position122, tokenIndex122 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l123
					}
					position++
					goto l122
				l123:
					position, tokenIndex = position122, tokenIndex122
					if buffer[position] != rune('L') {
						goto l116
					}
					position++
				}
			l122:
				{
					position124, tokenIndex124 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l125
					}
					position++
					goto l124
				l125:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('E') {
						goto l116
					}
					position++
				}
			l124:
				{
					position126, tokenIndex126 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l127
					}
					position++
					goto l126
				l127:
					position, tokenIndex = position126, tokenIndex126
					if buffer[position] != rune('C') {
						goto l116
					}
					position++
				}
			l126:
				{
					position128, tokenIndex128 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l129
					}
					position++
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					if buffer[position] != rune('T') {
						goto l116
					}
					position++
				}
			l128:
				if !_rules[ruleMustSpacing]() {
					goto l116
				}
				add(ruleSelect, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 19 From <- <(('f' / 'F') ('r' / 'R') ('o' / 'O') ('m' / 'M') MustSpacing)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				{
					position132, tokenIndex132 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l133
					}
					position++
					goto l132
				l133:
					position, tokenIndex = position132, tokenIndex132
					if buffer[position] != rune('F') {
						goto l130
					}
					position++
				}
			l132:
				{
					position134, tokenIndex134 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l135
					}
					position++
					goto l134
				l135:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('R') {
						goto l130
					}
					position++
				}
			l134:
				{
					position136, tokenIndex136 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l137
					}
					position++
					goto l136
				l137:
					position, tokenIndex = position136, tokenIndex136
					if buffer[position] != rune('O') {
						goto l130
					}
					position++
				}
			l136:
				{
					position138, tokenIndex138 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l139
					}
					position++
					goto l138
				l139:
					position, tokenIndex = position138, tokenIndex138
					if buffer[position] != rune('M') {
						goto l130
					}
					position++
				}
			l138:
				if !_rules[ruleMustSpacing]() {
					goto l130
				}
				add(ruleFrom, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 20 Where <- <(('w' / 'W') ('h' / 'H') ('e' / 'E') ('r' / 'R') ('e' / 'E') MustSpacing)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				{
					position142, tokenIndex142 := position, tokenIndex
					if buffer[position] != rune('w') {
						goto l143
					}
					position++
					goto l142
				l143:
					position, tokenIndex = position142, tokenIndex142
					if buffer[position] != rune('W') {
						goto l140
					}
					position++
				}
			l142:
				{
					position144, tokenIndex144 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l145
					}
					position++
					goto l144
				l145:
					position, tokenIndex = position144, tokenIndex144
					if buffer[position] != rune('H') {
						goto l140
					}
					position++
				}
			l144:
				{
					position146, tokenIndex146 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l147
					}
					position++
					goto l146
				l147:
					position, tokenIndex = position146, tokenIndex146
					if buffer[position] != rune('E') {
						goto l140
					}
					position++
				}
			l146:
				{
					position148, tokenIndex148 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l149
					}
					position++
					goto l148
				l149:
					position, tokenIndex = position148, tokenIndex148
					if buffer[position] != rune('R') {
						goto l140
					}
					position++
				}
			l148:
				{
					position150, tokenIndex150 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l151
					}
					position++
					goto l150
				l151:
					position, tokenIndex = position150, tokenIndex150
					if buffer[position] != rune('E') {
						goto l140
					}
					position++
				}
			l150:
				if !_rules[ruleMustSpacing]() {
					goto l140
				}
				add(ruleWhere, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 21 As <- <(('a' / 'A') ('s' / 'S') MustSpacing)> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				{
					position154, tokenIndex154 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l155
					}
					position++
					goto l154
				l155:
					position, tokenIndex = position154, tokenIndex154
					if buffer[position] != rune('A') {
						goto l152
					}
					position++
				}
			l154:
				{
					position156, tokenIndex156 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l157
					}
					position++
					goto l156
				l157:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('S') {
						goto l152
					}
					position++
				}
			l156:
				if !_rules[ruleMustSpacing]() {
					goto l152
				}
				add(ruleAs, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 22 Limit <- <(('l' / 'L') ('i' / 'I') ('m' / 'M') ('i' / 'I') ('t' / 'T') MustSpacing)> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				{
					position160, tokenIndex160 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l161
					}
					position++
					goto l160
				l161:
					position, tokenIndex = position160, tokenIndex160
					if buffer[position] != rune('L') {
						goto l158
					}
					position++
				}
			l160:
				{
					position162, tokenIndex162 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l163
					}
					position++
					goto l162
				l163:
					position, tokenIndex = position162, tokenIndex162
					if buffer[position] != rune('I') {
						goto l158
					}
					position++
				}
			l162:
				{
					position164, tokenIndex164 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l165
					}
					position++
					goto l164
				l165:
					position, tokenIndex = position164, tokenIndex164
					if buffer[position] != rune('M') {
						goto l158
					}
					position++
				}
			l164:
				{
					position166, tokenIndex166 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l167
					}
					position++
					goto l166
				l167:
					position, tokenIndex = position166, tokenIndex166
					if buffer[position] != rune('I') {
						goto l158
					}
					position++
				}
			l166:
				{
					position168, tokenIndex168 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l169
					}
					position++
					goto l168
				l169:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('T') {
						goto l158
					}
					position++
				}
			l168:
				if !_rules[ruleMustSpacing]() {
					goto l158
				}
				add(ruleLimit, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 23 Number <- <('0' / ([1-9] [0-9]*))> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				{
					position172, tokenIndex172 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l173
					}
					position++
					goto l172
				l173:
					position, tokenIndex = position172, tokenIndex172
					if c := buffer[position]; c < rune('1') || c > rune('9') {
						goto l170
					}
					position++
				l174:
					{
						position175, tokenIndex175 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l175
						}
						position++
						goto l174
					l175:
						position, tokenIndex = position175, tokenIndex175
					}
				}
			l172:
				add(ruleNumber, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 24 Spacing <- <Space*> */
		func() bool {
			{
				position177 := position
			l178:
				{
					position179, tokenIndex179 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l179
					}
					goto l178
				l179:
					position, tokenIndex = position179, tokenIndex179
				}
				add(ruleSpacing, position177)
			}
			return true
		},
		/* 25 MustSpacing <- <Space+> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if !_rules[ruleSpace]() {
					goto l180
				}
			l182:
				{
					position183, tokenIndex183 := position, tokenIndex
					if !_rules[ruleSpace]() {
						goto l183
					}
					goto l182
				l183:
					position, tokenIndex = position183, tokenIndex183
				}
				add(ruleMustSpacing, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 26 Space <- <(' ' / '\t' / EndOfLine)> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				{
					position186, tokenIndex186 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l187
					}
					position++
					goto l186
				l187:
					position, tokenIndex = position186, tokenIndex186
					if buffer[position] != rune('\t') {
						goto l188
					}
					position++
					goto l186
				l188:
					position, tokenIndex = position186, tokenIndex186
					if !_rules[ruleEndOfLine]() {
						goto l184
					}
				}
			l186:
				add(ruleSpace, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 27 EndOfLine <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				{
					position191, tokenIndex191 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l192
					}
					position++
					if buffer[position] != rune('\n') {
						goto l192
					}
					position++
					goto l191
				l192:
					position, tokenIndex = position191, tokenIndex191
					if buffer[position] != rune('\n') {
						goto l193
					}
					position++
					goto l191
				l193:
					position, tokenIndex = position191, tokenIndex191
					if buffer[position] != rune('\r') {
						goto l189
					}
					position++
				}
			l191:
				add(ruleEndOfLine, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 28 EndOfFile <- <!.> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				{
					position196, tokenIndex196 := position, tokenIndex
					if !matchDot() {
						goto l196
					}
					goto l194
				l196:
					position, tokenIndex = position196, tokenIndex196
				}
				add(ruleEndOfFile, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 30 Action0 <- <{ p.AppendField() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 32 Action1 <- <{ p.PathObjectProp(text) }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 33 Action2 <- <{ p.RegisterAlias(text) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 34 Action3 <- <{ p.FromArchive() }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 35 Action4 <- <{ p.FromObject() }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 36 Action5 <- <{ p.FromS3ObjectPath() }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 37 Action6 <- <{ p.PathArrayIndex(text) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 38 Action7 <- <{ p.PathWildcardIndex() }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 39 Action8 <- <{ p.PathObjectProp(text) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 40 Action9 <- <{ p.PathObjectProp(text) }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 41 Action10 <- <{ p.PathObjectPropNoCase(text) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
